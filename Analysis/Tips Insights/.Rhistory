}
if(a_aic[niter] < aic.best)
{
aic.best=a_aic[niter]
l.best=l
c.best=c
yhat.best=yhat
}
}
res=list("Complete")
for(i in 1:k) {res=list(summary(glm(tip_flag ~ . -1,data=dat[c.best==i,],family=binomial(link="logit"))),res)}
return(list(data=dat,nclust=k,tries=tries,seed=sed,aic.best=aic.best,number.loops=niter,
Best.try=l.best,cluster=c.best,results=res))
}
clustreg.predict=function(results,newdat){
yhat=rep(NA,nrow(newdat))
resid=pred=matrix(0,nrow(newdat),length(table(results$cluster)))
for(j in 1:length(table(results$cluster))){
pred[,j]=predict(glm(tip_flag ~ . -1,data=results$data[results$cluster==j,],family=binomial(link="logit")),newdata=newdat,
type="response")
resid[,j] = (pred[,j]-newdat[,1])^2
}
c = apply(resid,1,which.min)
for(m in 1:nrow(newdat)) {yhat[m]=ifelse(pred[m,c[m]]<0.5,0,1)}
p_aic = nrow(newdat)*log(sum(rss)/nrow(newdat)) + 2*(ncol(newdat)-1)
return(list(results=results,newdata=newdat,cluster=c,yhat=yhat,p_aic=p_aic))
}
cat_cols = c(8:10,12,16,19,20,21,22,23,25:ncol(train))
train[,cat_cols] = lapply(train[cat_cols], as.factor)
test[,cat_cols] = lapply(test[cat_cols], as.factor)
train<-train[!(train$speed_category_dropoff_end=="slow" | train$speed_category_pickup_start=="slow")|
train$flag_overnight == "1" | train$payment_type == "Other" ,]
test<-test[!(test$speed_category_dropoff_end=="slow" | test$speed_category_pickup_start=="slow")|
test$flag_overnight == "1" | test$payment_type == "Other" ,]
train$tolls = NULL
test$tolls = NULL
rslt = readRDS(dataPath,"lf_regs.rds",sep="/")
rslt = readRDS(paste(dataPath,"lf_regs.rds",sep="/"))
chosen_proto = rslt$chosen_proto
proto_tot_wss = rslt$proto_tot_wss
proto_knn_preds = rslt$proto_knn_preds
proto_knn_test = rslt$proto_knn_test
chosen_proto$centers
chosen_proto$size
plot(x = colnames(p_tot_wss), y = p_tot_wss, xlab = "Number of groups", ylab = "Total WSS", type = "l")
p_tot_wss = rslt$proto_tot_wss
plot(x = colnames(p_tot_wss), y = p_tot_wss, xlab = "Number of groups", ylab = "Total WSS", type = "l")
points(x = colnames(p_tot_wss), y = p_tot_wss)
proto_knn_preds
test_num_preds = test[,pred_num_cols]
proto_knn_test
test_num_preds = test[,pred_num_cols]
cat_preds = c(7,8,9,24,21,19)
pred_num_cols = c(2,10,12,14,16,23)
test_num_preds = test[,pred_num_cols]
norm_test_num_preds = scale(test_num_preds)
test_cat_preds = test[,cat_preds]
test_clustreg = cbind(norm_test_num_preds,test_cat_preds)
proto_knn_test_resp = predict(chosen_proto,newdata=test_clustreg,type="response")
head(proto_knn_test_resp)
proto_knn_test_resp = predict.kproto(chosen_proto,newdata=test_clustreg)
library(clustMixType)
View(chosen_proto)
head(proto_knn_test)
knn_test_clust = proto_knn_test$cluster
test_knn_preds = list()
for (i in 1:max(knn_test_clust)){
test_knn_preds[i] = sum(test$tip_flag[knn_test_clust == i] == "1")/(sum((test$tip_flag[knn_test_clust == i] == "1"))+sum((test$tip_flag[knn_test_clust == i] == "0")))
}
test_knn_preds
plot(test_knn_preds)
plot(as.data.frame(test_knn_preds))
as.data.frame(test_knn_preds)
test_knn = as.data.frame(test_knn_preds)
colnames(test_knn) = c("1","2","3","4","5")
plot(test_knn)
plot(x = colnames(tesT_knn), y = test_knn)
plot(x = colnames(test_knn), y = test_knn)
colnames(test_knn) = c("1","2","3","4","5", ylim = c(0,1))
plot(x = colnames(test_knn), y = test_knn, ylim = c(0,1))
plot(x = colnames(test_knn), y = test_knn, ylim = c(0,1), type = "l")
plot(x = colnames(test_knn), y = test_knn, ylim = c(0,1), type = "b")
plot(x = colnames(test_knn), y = test_knn, ylim = c(0,1), type = "b", ylab = "Proportion of tippers", xlab = "Group", main = "K-Prototype tipper prediction KNN")
p_c =  chosen_proto$cluster
p_c =  chosen_proto$cluster
par(mfrow=c(2,2))
k_data = train[p_c == 1,]
ggplot(k_data, aes(payment_type)) +
geom_bar(fill = "blue")
k_data = train[p_c == 2,]
ggplot(k_data, aes(payment_type)) +
geom_bar(fill = "blue")
k_data = train[p_c == 3,]
p_c =  chosen_proto$cluster
par(mfrow=c(2,3))
k_data = train[p_c == 1,]
ggplot(k_data, aes(payment_type)) +
geom_bar(fill = "blue")
library(ggplot2)
p_c =  chosen_proto$cluster
par(mfrow=c(2,3))
library(ggplot2)
k_data = train[p_c == 1,]
ggplot(k_data, aes(payment_type)) +
geom_bar(fill = "blue")
k_data = train[p_c == 2,]
ggplot(k_data, aes(payment_type)) +
geom_bar(fill = "blue")
k_data = train[p_c == 3,]
ggplot(k_data, aes(payment_type)) +
geom_bar(fill = "blue")
k_data = train[p_c == 4,]
ggplot(k_data, aes(payment_type)) +
geom_bar(fill = "blue")
k_data = train[p_c == 5,]
ggplot(k_data, aes(payment_type)) +
geom_bar(fill = "blue")
p_c =  chosen_proto$cluster
par(mfrow=c(2,3))
library(ggplot2)
k_data = train[p_c == 1,]
ggplot(k_data, aes(start_month)) +
geom_bar(fill = "blue")
k_data = train[p_c == 2,]
ggplot(k_data, aes(start_month)) +
geom_bar(fill = "blue")
k_data = train[p_c == 3,]
ggplot(k_data, aes(start_month)) +
geom_bar(fill = "blue")
k_data = train[p_c == 4,]
ggplot(k_data, aes(start_month)) +
geom_bar(fill = "blue")
k_data = train[p_c == 5,]
ggplot(k_data, aes(start_month)) +
geom_bar(fill = "blue")
p_c =  chosen_proto$cluster
par(mfrow=c(2,3))
library(ggplot2)
k_data = train[p_c == 1,]
ggplot(k_data, aes(start_weekday)) +
geom_bar(fill = "blue")
k_data = train[p_c == 2,]
ggplot(k_data, aes(start_weekday)) +
geom_bar(fill = "blue")
k_data = train[p_c == 3,]
ggplot(k_data, aes(start_weekday)) +
geom_bar(fill = "blue")
k_data = train[p_c == 4,]
ggplot(k_data, aes(start_weekday)) +
geom_bar(fill = "blue")
k_data = train[p_c == 5,]
ggplot(k_data, aes(start_weekday)) +
geom_bar(fill = "blue")
p_c =  chosen_proto$cluster
par(mfrow=c(2,3))
library(ggplot2)
k_data = train[p_c == 1,]
ggplot(k_data, aes(start_hour)) +
geom_bar(fill = "blue")
k_data = train[p_c == 2,]
ggplot(k_data, aes(start_hour)) +
geom_bar(fill = "blue")
k_data = train[p_c == 3,]
ggplot(k_data, aes(start_hour)) +
geom_bar(fill = "blue")
k_data = train[p_c == 4,]
ggplot(k_data, aes(start_hour)) +
geom_bar(fill = "blue")
k_data = train[p_c == 5,]
ggplot(k_data, aes(start_hour)) +
geom_bar(fill = "blue")
p_c =  chosen_proto$cluster
par(mfrow=c(2,3))
library(ggplot2)
k_data = train[p_c == 1,]
ggplot(k_data, aes(ride_type_id)) +
geom_bar(fill = "blue")
p_c =  chosen_proto$cluster
par(mfrow=c(2,3))
library(ggplot2)
k_data = train[p_c == 1,]
ggplot(k_data, aes(ride_type)) +
geom_bar(fill = "blue")
k_data = train[p_c == 2,]
ggplot(k_data, aes(ride_type)) +
geom_bar(fill = "blue")
k_data = train[p_c == 3,]
ggplot(k_data, aes(ride_type)) +
geom_bar(fill = "blue")
k_data = train[p_c == 4,]
ggplot(k_data, aes(ride_type)) +
geom_bar(fill = "blue")
k_data = train[p_c == 5,]
ggplot(k_data, aes(ride_type)) +
geom_bar(fill = "blue")
p_c =  chosen_proto$cluster
par(mfrow=c(2,3))
library(ggplot2)
k_data = train[p_c == 1,]
ggplot(k_data, aes(start_region)) +
geom_bar(fill = "blue")
p_c =  chosen_proto$cluster
par(mfrow=c(2,3))
library(ggplot2)
k_data = train[p_c == 1,]
ggplot(k_data, aes(region_pickup)) +
geom_bar(fill = "blue")
k_data = train[p_c == 2,]
ggplot(k_data, aes(region_pickup)) +
geom_bar(fill = "blue")
k_data = train[p_c == 3,]
ggplot(k_data, aes(region_pickup)) +
geom_bar(fill = "blue")
k_data = train[p_c == 4,]
ggplot(k_data, aes(region_pickup)) +
geom_bar(fill = "blue")
k_data = train[p_c == 5,]
ggplot(k_data, aes(region_pickup)) +
geom_bar(fill = "blue")
chosen_proto$size
plot(x = colnames(test_knn), y = test_knn, ylim = c(0,1), type = "b", ylab = "Proportion of tippers", xlab = "Group", main = "K-Prototype tipper prediction KNN")
knn_train_clust = chosen_proto$cluster
train_knn_preds = list()
for (i in 1:max(knn_train_clust)){
train_knn_preds[i] = sum(train$tip_flag[knn_train_clust == i] == "1")/(sum((train$tip_flag[knn_train_clust == i] == "1"))+sum((train$tip_flag[knn_train_clust == i] == "0")))
}
train_knn_preds
train_knn = as.data.frame(train_knn_preds)
colnames(train_knn) = c("1","2","3","4","5")
plot(x = colnames(train_knn), y = train_knn, ylim = c(0,1), type = "b", ylab = "Proportion of tippers", xlab = "Group", main = "K-Prototype tipper prediction KNN")
set.seed(232323)
# tip_flag ~ miles, pay-type, speed_start, bus_start, region_pickup, total_no_tip
clustreg_cols = c(20,2,10,12,23,21)
train_clustreg = train[,clustreg_cols]
# sample_size = floor(0.05*nrow(train_clustreg))
# train_index = sample(seq_len(nrow(train_clustreg)), size = sample_size)
# train_clustreg = train_clustreg[train_index,]
# rownames(train_clustreg) = NULL
# ss = round(0.7*sum(train_clustreg["tip_flag"]=="0"),0)
# rm_index = sample(which(train_clustreg["tip_flag"] == "0"), size = ss)
# train_clustreg = train_clustreg[-rm_index,]
#train_clustreg = train_clustreg[!train_clustreg[,"payment_type"] == "Other",]
#train_clustreg["payment_type"] = ifelse(train_clustreg["payment_type"] == "Mobile","Mobile","Other")
summary(train_clustreg)
library(flexmix)
flx = initFlexmix(cbind(as.numeric(train_clustreg$tip_flag)-1,1-as.numeric(train_clustreg$tip_flag)+1) ~ .-1, data = train_clustreg, k = 1:4, model = FLXMRglm(family = "binomial"))
unique(flx)
set.seed(232323)
# tip_flag ~
clustreg_cols = c(20,2,10,12,23,21,9)
train_clustreg = train[,clustreg_cols]
# sample_size = floor(0.05*nrow(train_clustreg))
# train_index = sample(seq_len(nrow(train_clustreg)), size = sample_size)
# train_clustreg = train_clustreg[train_index,]
# rownames(train_clustreg) = NULL
# ss = round(0.7*sum(train_clustreg["tip_flag"]=="0"),0)
# rm_index = sample(which(train_clustreg["tip_flag"] == "0"), size = ss)
# train_clustreg = train_clustreg[-rm_index,]
#train_clustreg = train_clustreg[!train_clustreg[,"payment_type"] == "Other",]
#train_clustreg["payment_type"] = ifelse(train_clustreg["payment_type"] == "Mobile","Mobile","Other")
summary(train_clustreg)
library(flexmix)
flx = initFlexmix(cbind(as.numeric(train_clustreg$tip_flag)-1,1-as.numeric(train_clustreg$tip_flag)+1) ~ .-1, data = train_clustreg, k = 1:4, model = FLXMRglm(family = "binomial"))
unique(flx)
chosen_flx = flexmix(cbind(as.numeric(train_clustreg$tip_flag)-1,1-as.numeric(train_clustreg$tip_flag)+1) ~ .-1, data = train_clustreg, k = 2, model = FLXMRglm(family = "binomial"))
summary(chosen_flx)
cls = clusters(chosen_flx)
tp = predict(chosen_flx,train_clustreg, type = "response")
tp = as.data.frame(tp)
train_yhat = c()
for(m in 1:nrow(train_clustreg)) {train_yhat[m]=ifelse(tp[m,cls[m]]<0.5,0,1)}
table(train_clustreg$tip_flag,train_yhat)
round(prop.table(table(train_clustreg$tip_flag,train_yhat),1),2)
chosen_flx = flexmix(cbind(as.numeric(train_clustreg$tip_flag)-1,1-as.numeric(train_clustreg$tip_flag)+1) ~ ., data = train_clustreg, k = 2, model = FLXMRglm(family = "binomial"))
summary(chosen_flx)
cls = clusters(chosen_flx)
tp = predict(chosen_flx,train_clustreg, type = "response")
tp = as.data.frame(tp)
train_yhat = c()
for(m in 1:nrow(train_clustreg)) {train_yhat[m]=ifelse(tp[m,cls[m]]<0.5,0,1)}
table(train_clustreg$tip_flag,train_yhat)
round(prop.table(table(train_clustreg$tip_flag,train_yhat),1),2)
set.seed(232323)
# tip_flag ~
clustreg_cols = c(20,2,10,12,23,21,9,7)
train_clustreg = train[,clustreg_cols]
# sample_size = floor(0.05*nrow(train_clustreg))
# train_index = sample(seq_len(nrow(train_clustreg)), size = sample_size)
# train_clustreg = train_clustreg[train_index,]
rownames(train_clustreg) = NULL
ss = round(0.7*sum(train_clustreg["tip_flag"]=="0"),0)
rm_index = sample(which(train_clustreg["tip_flag"] == "0"), size = ss)
train_clustreg = train_clustreg[-rm_index,]
train_clustreg = train_clustreg[!train_clustreg[,"payment_type"] == "Other",]
train_clustreg["payment_type"] = ifelse(train_clustreg["payment_type"] == "Mobile","Mobile","Other")
summary(train_clustreg)
library(flexmix)
flx = initFlexmix(cbind(as.numeric(train_clustreg$tip_flag)-1,1-as.numeric(train_clustreg$tip_flag)+1) ~ .-1, data = train_clustreg, k = 1:4, model = FLXMRglm(family = "binomial"))
unique(flx)
chosen_flx = flexmix(cbind(as.numeric(train_clustreg$tip_flag)-1,1-as.numeric(train_clustreg$tip_flag)+1) ~ .-1, data = train_clustreg, k = 2, model = FLXMRglm(family = "binomial"))
summary(chosen_flx)
cls = clusters(chosen_flx)
tp = predict(chosen_flx,train_clustreg, type = "response")
tp = as.data.frame(tp)
train_yhat = c()
for(m in 1:nrow(train_clustreg)) {train_yhat[m]=ifelse(tp[m,cls[m]]<0.5,0,1)}
table(train_clustreg$tip_flag,train_yhat)
round(prop.table(table(train_clustreg$tip_flag,train_yhat),1),2)
cls = clusters(chosen_flx)
tp = predict(chosen_flx,train_clustreg, type = "response")
tp = as.data.frame(tp)
train_yhat = c()
for(m in 1:nrow(train_clustreg)) {train_yhat[m]=ifelse(tp[m,cls[m]]<0.4,0,1)}
table(train_clustreg$tip_flag,train_yhat)
round(prop.table(table(train_clustreg$tip_flag,train_yhat),1),2)
plot(roc(tp,train$tip_flag))
library(AUC)
plot(roc(tp,train$tip_flag))
plot(roc(tp,train_clustreg$tip_flag))
plot(roc(train_yhat,train_clustreg$tip_flag))
train_probs = c()
for(m in 1:nrow(train_clustreg)) {train_probs[m]=tp[m,cls[m]]}
plot(roc(train_yhat,train_clustreg$tip_flag))
plot(roc(train_probs,train_clustreg$tip_flag))
roc(train_probs,train_clustreg$tip_flag)
lca_reg_roc = roc(train_probs,train_clustreg$tip_flag)
plot(lca_reg_roc)
round(prop.table(table(train_clustreg$tip_flag,train_yhat),1),2)
for(m in 1:nrow(train_clustreg)) {train_yhat[m]=ifelse(tp[m,cls[m]]<0.3,0,1)}
round(prop.table(table(train_clustreg$tip_flag,train_yhat),1),2)
for(m in 1:nrow(train_clustreg)) {train_yhat[m]=ifelse(tp[m,cls[m]]<0.45,0,1)}
round(prop.table(table(train_clustreg$tip_flag,train_yhat),1),2)
for(m in 1:nrow(train_clustreg)) {train_yhat[m]=ifelse(tp[m,cls[m]]<0.4,0,1)}
round(prop.table(table(train_clustreg$tip_flag,train_yhat),1),2)
for(m in 1:nrow(train_clustreg)) {train_yhat[m]=ifelse(tp[m,cls[m]]<0.42,0,1)}
round(prop.table(table(train_clustreg$tip_flag,train_yhat),1),2)
t_cls = clusters(chosen_flx,test_clustreg)
test_clustreg = test[,clustreg_cols]
test_clustreg = test[,clustreg_cols]
t_cls = clusters(chosen_flx,test_clustreg)
head(test_clustreg)
t_cls = clusters(chosen_flx,test_clustreg)
t_cls = clusters(test_clustreg,chosen_flx)
t_cls = clusters(chosen_flx,newdata=test_clustreg)
?clusters
?clusters
a =1
test_clustreg = test[,clustreg_cols]
t_cls = clusters(chosen_flx,newdata=test_clustreg)
t_cls = clusters(chosen_flx,newdata=train)
cluster(chosen_flx,newdata=test_cluster)
clusters(chosen_flx,newdata=test_cluster)
clusters(chosen_flx,newdata=test_clustreg)
chosen_flx@posterior$unscaled
chosen_flx@weights
chosen_flx@cluster
test_clustreg = test[,clustreg_cols]
t_cls = clusters(chosen_flx,newdata=test_clustreg)
chosen_flx@control
chosen_flx@group
chosen_flx@size
chosen_flx@components
chosen_flx@concomitant
chosen_flx@
hp = predict(chosen_flx,train_clustreg, type = "response")
chosen_flx@k
chosen_flx@model
chosen_flx@model
chosen_flx@components
for(m in seq_along(chosen_flx@model)) {
comp <- lapply(chosen_flx@components, "[[", m)
x[[m]] <- predict(chosen_flx@model[[m]], test_clustreg, comp)
}
test_clustreg = test_clustreg[!test_clustreg[,"payment_type"] == "Other",]
test_clustreg["payment_type"] = ifelse(test_clustreg["payment_type"] == "Mobile","Mobile","Other")
for(m in seq_along(chosen_flx@model)) {
comp <- lapply(chosen_flx@components, "[[", m)
x[[m]] <- predict(chosen_flx@model[[m]], test_clustreg, comp)
}
x = list()
for(m in seq_along(chosen_flx@model)) {
comp <- lapply(chosen_flx@components, "[[", m)
x[[m]] <- predict(chosen_flx@model[[m]], test_clustreg, comp)
}
x
rflexmix(chosen_flx,newdata=test_clustreg)
t_gourps = rflexmix(chosen_flx,newdata=test_clustreg)
t_gourps
clusters(chosen_flx,newdata=test_clustreg)
clusters(chosen_flx,newdata=test_clustreg)
clusters(chosen_flx,newdata=train_clustreg)
t_cls = clusters(chosen_flx,newdata=train_clustreg)
head(t_cls)
t_cls == cls
t_cls = clusters(chosen_flx,newdata=test_clustreg)
chosen_flx@model@xlevels
chosen_flx@xlevels
t_cls = clusters(chosen_flx,newdata=test_clustreg)
hp = predict(chosen_flx,train_clustreg, type = "response")
hp = as.data.frame(hp)
test_yhat = c()
head(hp)
tail(hp)
head(cls)
head(tp)
res = list(proto_tot_wss = p_tot_wss,
chosen_proto = chosen_proto,
proto_knn_preds = proto_knn_preds,
proto_knn_test = proto_knn_test,
chosen_flx = chosen_flx,
lca_reg_roc = lca_reg_roc)
saveRDS(res,paste(dataPath,"lf_regs.rds",sep="/"))
set.seed(232323)
# tip_flag ~
clustreg_cols = c(20,2,10,12,23,21,9,7,18)
train_clustreg = train[,clustreg_cols]
# sample_size = floor(0.05*nrow(train_clustreg))
# train_index = sample(seq_len(nrow(train_clustreg)), size = sample_size)
# train_clustreg = train_clustreg[train_index,]
rownames(train_clustreg) = NULL
ss = round(0.7*sum(train_clustreg["tip_flag"]=="0"),0)
rm_index = sample(which(train_clustreg["tip_flag"] == "0"), size = ss)
train_clustreg = train_clustreg[-rm_index,]
train_clustreg = train_clustreg[!train_clustreg[,"payment_type"] == "Other",]
train_clustreg["payment_type"] = ifelse(train_clustreg["payment_type"] == "Mobile","Mobile","Other")
summary(train_clustreg)
chosen_flx = flexmix(cbind(as.numeric(train_clustreg$tip_flag)-1,1-as.numeric(train_clustreg$tip_flag)+1) ~ .-1, data = train_clustreg, k = 2, model = FLXMRglm(family = "binomial"))
summary(chosen_flx)
cls = clusters(chosen_flx)
tp = predict(chosen_flx,train_clustreg, type = "response")
tp = as.data.frame(tp)
train_yhat = c()
train_probs = c()
for(m in 1:nrow(train_clustreg)) {train_probs[m]=tp[m,cls[m]]}
for(m in 1:nrow(train_clustreg)) {train_yhat[m]=ifelse(tp[m,cls[m]]<0.42,0,1)}
table(train_clustreg$tip_flag,train_yhat)
round(prop.table(table(train_clustreg$tip_flag,train_yhat),1),2)
library(AUC)
lca_reg_roc = roc(train_probs,train_clustreg$tip_flag)
plot(lca_reg_roc)
for(m in 1:nrow(train_clustreg)) {train_yhat[m]=ifelse(tp[m,cls[m]]<0.50,0,1)}
round(prop.table(table(train_clustreg$tip_flag,train_yhat),1),2)
for(m in 1:nrow(train_clustreg)) {train_yhat[m]=ifelse(tp[m,cls[m]]<0.45,0,1)}
round(prop.table(table(train_clustreg$tip_flag,train_yhat),1),2)
for(m in 1:nrow(train_clustreg)) {train_yhat[m]=ifelse(tp[m,cls[m]]<0.43,0,1)}
round(prop.table(table(train_clustreg$tip_flag,train_yhat),1),2)
for(m in 1:nrow(train_clustreg)) {train_yhat[m]=ifelse(tp[m,cls[m]]<0.44,0,1)}
round(prop.table(table(train_clustreg$tip_flag,train_yhat),1),2)
res = list(proto_tot_wss = p_tot_wss,
chosen_proto = chosen_proto,
proto_knn_preds = proto_knn_preds,
proto_knn_test = proto_knn_test,
chosen_flx = chosen_flx,
lca_reg_roc = lca_reg_roc)
saveRDS(res,paste(dataPath,"lf_regs.rds",sep="/"))
res = list(proto_tot_wss = p_tot_wss,
chosen_proto = chosen_proto,
proto_knn_preds = proto_knn_preds,
proto_knn_test = proto_knn_test,
chosen_flx = chosen_flx,
lca_reg_roc = lca_reg_roc,
train_yhat = train_yhat)
saveRDS(res,paste(dataPath,"lf_regs.rds",sep="/"))
set.seed(232323)
# tip_flag ~
clustreg_cols = c(20,2,10,12,23,21,9,7,18)
train_clustreg = train[,clustreg_cols]
# sample_size = floor(0.05*nrow(train_clustreg))
# train_index = sample(seq_len(nrow(train_clustreg)), size = sample_size)
# train_clustreg = train_clustreg[train_index,]
rownames(train_clustreg) = NULL
#ss = round(0.7*sum(train_clustreg["tip_flag"]=="0"),0)
#rm_index = sample(which(train_clustreg["tip_flag"] == "0"), size = ss)
#train_clustreg = train_clustreg[-rm_index,]
train_clustreg = train_clustreg[!train_clustreg[,"payment_type"] == "Other",]
train_clustreg["payment_type"] = ifelse(train_clustreg["payment_type"] == "Mobile","Mobile","Other")
summary(train_clustreg)
t_cls = clusters(chosen_flx,newdata=train_clustreg)
train_yhat = c()
for(m in 1:nrow(train_clustreg)) {train_yhat[m]=ifelse(hp[m,t_cls[m]]<0.42,0,1)}
res = list(proto_tot_wss = p_tot_wss,
chosen_proto = chosen_proto,
proto_knn_preds = proto_knn_preds,
proto_knn_test = proto_knn_test,
chosen_flx = chosen_flx,
lca_reg_roc = lca_reg_roc,
train_yhat = train_yhat)
saveRDS(res,paste(dataPath,"lf_regs.rds",sep="/"))
any(is.na(train_yhat))
train_yhat[is.na(train_yhat)]
t_cls[is.na(t_cls)]
any(is.na(t_cls))
tp = predict(chosen_flx,train_clustreg, type = "response")
tp = predict(chosen_flx,train_clustreg, type = "response")
tp = as.data.frame(tp)
train_yhat = c()
head(tp)
for(m in 1:nrow(train_clustreg)) {train_yhat[m]=ifelse(tp[m,t_cls[m]]<0.42,0,1)}
any(is.na(t_cls))
any(is.na(train_yhat))
any(is.na(train_yhat))
any(is.na(train_yhat))
any(is.na(train_yhat))
res = list(proto_tot_wss = p_tot_wss,
chosen_proto = chosen_proto,
proto_knn_preds = proto_knn_preds,
proto_knn_test = proto_knn_test,
chosen_flx = chosen_flx,
lca_reg_roc = lca_reg_roc,
train_yhat = train_yhat)
saveRDS(res,paste(dataPath,"lf_regs.rds",sep="/"))
install.packages("flexmix")
